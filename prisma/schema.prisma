// Prisma schema for Titcha - Supabase PostgreSQL connection
// This file configures the database connection and authentication models

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================
// User Authentication & Role Management
// ============================================================

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  title          String?   // Mr, Mrs, Ms etc.
  role           Role      @default(STUDENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]

  // App-specific relations
  learners       Learner[] @relation("ParentToChild")

  @@map("users")
}

model Learner {
  id             String   @id @default(cuid())
  name           String
  grade          String
  school         String?
  subjects       String[]
  parentId       String?
  parent         User?    @relation("ParentToChild", fields: [parentId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("learners")
}

enum Role {
  PARENT
  TEACHER
  STUDENT
}

// ============================================================
// NextAuth Required Models
// ============================================================

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
